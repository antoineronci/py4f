# -*- coding: utf-8 -*-
"""CAPM.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1tGOSGqNeXFKXACQ1uyOZuIhT3DaZb1Za

# Retrieve and compile Data
"""

pip install yfinance --upgrade --no-cache-dir

import os
import bs4 as bs
import datetime as dt
import pickle
import requests
import pandas as pd
from pandas_datareader import data as pdr
import yfinance as yf
import matplotlib.pyplot as plt
from matplotlib.pylab import plot
from matplotlib import style
import numpy as np

yf.pdr_override

def save_sp500_tickers():
  resp = requests.get('https://en.wikipedia.org/wiki/List_of_S%26P_500_companies')
  soup = bs.BeautifulSoup(resp.text,"lxml")
  table = soup.find('table', {'class':'wikitable sortable'})
  tickers = []
  for row in table.findAll('tr')[1:]:
    ticker = row.findAll('td')[0].text.replace('.','-')
    ticker = ticker[:-1]
    tickers.append(ticker)
  
  with open("sp500tickers.pickle","wb") as f:
    pickle.dump(tickers,f)
  return tickers
save_sp500_tickers()

def get_data_from_yahoo(reload_sp500=False):
  if reload_sp500:
    tickers = save_sp500_tickers()
  else:
    with open("sp500tickers.pickle","rb") as f:
      tickers = pickle.load(f)
  if not os.path.exists('stock_dfs'):
    os.makedirs('stock_dfs')
  
  

  for ticker in tickers:
    if not os.path.exists('stock_dfs/{}.csv'.format(ticker)):
      x = yf.Ticker(ticker)
      df = x.history(period="10y",interval='1d') 
      df.reset_index(inplace=True)
      df.set_index("Date",inplace=True)
      df.to_csv('stock_dfs/{}.csv'.format(ticker))
    #else:
    #  print('Already have {}'.format(ticker))

get_data_from_yahoo()

def compile_data():
  with open("sp500tickers.pickle","rb") as f:
    tickers = pickle.load(f)
  main_df = pd.read_csv('F-F_Research_Data_Factors_daily.CSV')
  main_df['Date'] = pd.to_datetime(main_df['Unnamed: 0'], format='%Y%m%d', errors='coerce')
  main_df['Date'] = main_df['Date'].dt.strftime('%Y-%m-%d')
  main_df.drop(['Unnamed: 0'],1,inplace=True)
  main_df.set_index('Date',inplace=True)
  main_df.rename(columns={'RF':'risk-free'},inplace=True)

  for count, ticker in enumerate(tickers):
    df = pd.read_csv('stock_dfs/{}.csv'.format(ticker))
    df.set_index('Date',inplace=True)
    df.rename(columns = {'Close': ticker}, inplace=True)
    df = df.filter(items=[ticker])
   
    main_df = main_df.join(df, how='outer')
   
  main_df.to_csv('sp500_joined_closes.csv')
compile_data()

def compute_returns():
  df = pd.read_csv('sp500_joined_closes.csv')
  df.set_index('Date', inplace=True)
  
  main_df = df.filter(items=['Mkt-RF','SMB','HML','risk-free'])

  for ticker in df.drop(['Mkt-RF','SMB','HML','risk-free'],1,inplace=False).columns:
    print(ticker)
    df['return_{}'.format(ticker)] = (df[ticker] - df[ticker].shift(1))/df[ticker].shift(1)  
    if main_df.empty:
      main_df = df.filter(items=['return_{}'.format(ticker)])
    else:
      main_df = main_df.join(df.filter(items=['return_{}'.format(ticker)]), how='outer')
    print(main_df)
  main_df.to_csv('sp500_returns.csv')
  

compute_returns()

def visualize_data():
  df = pd.read_csv('sp500_returns.csv')
  df_corr = df.corr()

  data = df_corr.values
  fig = plt.figure()
  ax = fig.add_subplot(1,1,1)

  heatmap = ax.pcolor(data, cmap=plt.cm.RdYlGn)
  fig.colorbar(heatmap)
  ax.set_xticks(np.arange(data.shape[0]) + 0.5, minor=False)
  ax.set_yticks(np.arange(data.shape[1]) + 0.5, minor=False)
  ax.invert_yaxis()
  ax.xaxis.tick_top()

  column_labels = df_corr.columns
  row_labels = df_corr.index

  ax.set_xticklabels(column_labels)
  ax.set_yticklabels(row_labels)
  plt.xticks(rotation=90)
  heatmap.set_clim(-1,1)
  plt.tight_layout()
  plt.show()

"""# Data processing"""

from sklearn.linear_model import LinearRegression
from sklearn.model_selection import train_test_split
from sklearn.model_selection import cross_val_score

#Data Pre-processing

#create models and find the best stocks correlations

df = pd.read_csv('sp500_returns.csv')
df.set_index('Date',inplace=True)
scores=[]
tickers=[]
for ticker in df.drop(['Mkt-RF','SMB','HML','risk-free'],1,inplace=False).columns:
  main_df=pd.DataFrame()
  X = pd.DataFrame()
  y = pd.DataFrame()
  main_df = df.filter(items=['Mkt-RF','SMB','HML','risk-free',ticker])
  main_df.dropna(axis=0,how='any',inplace=True)
  if len(main_df) > 300:
    X = main_df.filter(items=['Mkt-RF','SMB','HML','risk_free']).values
    y = main_df.filter(items=[ticker]).values
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2)
    
    ml = LinearRegression().fit(X_train,y_train)
    score=ml.score(X_test,y_test)
    
    if score > 0.7:
      scores.append(score)
      tickers.append(ticker)


best_score_stocks=df.filter(items=tickers)

print(tickers)

"""# Trading strategy"""

#Si les valeurs réelles sont au dessus(en dessous) du CAPM alors achat(vente) 
#Cloture de la position lorsque valeur réelle se raproche du CAPM

df = pd.read_csv('sp500_returns.csv')
df.set_index('Date',inplace=True)
def trade_backtest(ticker):
  profit = 0
  count = 0
  main_df=pd.DataFrame()
  X = pd.DataFrame()
  y = pd.DataFrame()

  main_df = df.filter(items=['Mkt-RF','SMB','HML','risk-free',ticker])
  main_df.dropna(axis=0,how='any',inplace=True)
  
  X = main_df.filter(items=['Mkt-RF','SMB','HML','risk_free']).values
  y = main_df.filter(items=[ticker]).values
  X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3)
    
  ml = LinearRegression().fit(X_train,y_train)
  score=ml.score(X_test,y_test)
  print(ticker,'score:',score)
  
  X_eval = X[len(main_df)-200:]
  Y_eval = y[len(main_df)-200:]
  Y_predict=ml.predict(X_eval)

  size_positions=Y_predict*0

  for i in range(len(Y_predict)-10):
    percent=0

    if Y_predict[i] > Y_eval[i]:
      size_positions[i] = size_positions[i] + 100 
      for j in range(1,7):               ###on cloture la position si la valeur intrasèque rejoint la value réelle sous 6 jours 
        if Y_predict[i+j] <= Y_eval[i+j]:
          percent = (1+Y_eval[i+1])
          for k in range(1,j):
            percent= percent*(1+Y_eval[i+1+k])
            size_positions[i+k] = size_positions[i+k] + 100
          profit = profit + 100*(abs(percent)-1)
          break
      if percent==0:                          ###sinon on cloture le 6e jour 
        percent = (1+Y_eval[i+1])*(1+Y_eval[i+2])*(1+Y_eval[i+3])*(1+Y_eval[i+4])*(1+Y_eval[i+5])*(1+Y_eval[i+6])
        profit = profit + 100*(percent-1)
        for k in range(1,6):
          size_positions[i+k] = size_positions[i+k] + 100
      count += 1    

    elif Y_predict[i] < Y_eval[i]:
      size_positions[i] = size_positions[i] + 100
      for j in range(1,7):
        if Y_predict[i+j] >= Y_eval[i+j]:
          percent = (1+Y_eval[i+1])
          for k in range(1,j):
            percent = percent*(1+Y_eval[i+1+k])
            size_positions[i+k] = size_positions[i+k] + 100
          profit = profit + 100*(1-abs(percent))
          break
      if percent==0:
        percent = (1+Y_eval[i+1])*(1+Y_eval[i+2])*(1+Y_eval[i+3])*(1+Y_eval[i+4])*(1+Y_eval[i+5])*(1+Y_eval[i+6])
        profit = profit + 100*(1-percent)
        for k in range(1,6):
          size_positions[i+k] = size_positions[i+k] + 100
      count += 1

  print('Profit:',profit,'nb of trade',count)
  plot(size_positions)
  plt.show

trade_backtest('return_AMP')

###As max(size_position) = 600, let assume we have cash_free=600 at time beginning.
###So anual return = (700-600)/600=16.667%

