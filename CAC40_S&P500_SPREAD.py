# -*- coding: utf-8 -*-
"""Untitled5.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1PxUab82LFTQ3z9eFosa495ESrVfrN3B-
"""

pip install yfinance --upgrade --no-cache-dir

from pandas_datareader import data as pdr
import yfinance as yf
yf.pdr_override

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt 
from sklearn.linear_model import LinearRegression
from sklearn.model_selection import train_test_split
from sklearn.model_selection import cross_val_score

period='5y'
interval='1d'
x = yf.Ticker('^FCHI')
y = yf.Ticker('^GSPC')
dfx = x.history(period=period,interval=interval)[['Close']]
dfy = y.history(period=period,interval=interval)[['Close']]

z = yf.Ticker('^VIX')
vix = z.history(period=period,interval=interval)[['Close']]
vix.rename(columns={'Close':'VIX'},inplace=True)

#Save last closing prices
Px = dfx.iloc[-1,0]
Py = dfy.iloc[-1,0]

#Compute returns
dfx = dfx.pct_change(1)
dfx.rename(columns ={'Close': 'return_CAC40'}, inplace=True)
dfy = dfy.pct_change(1)
dfy.rename(columns = {'Close': 'return_SP500'}, inplace=True)

dfy = dfy.join(dfx, how='outer')
dfy = dfy.join(vix, how='outer')
dfy.VIX=dfy.VIX.shift(1)
dfy.dropna(inplace=True)
dfy.to_csv('dfy.csv')

def strategy(rolling_beta,rolling_window_mean,rolling_window_std,thresh1,thresh2,thresh_vix):
  dfy=pd.read_csv('dfy.csv')
  dfy.set_index('Date',inplace=True)
  dfy['Beta'] = 100*np.ones((len(dfy),1))
  for i in range(rolling_beta,len(dfy)):
    beta = LinearRegression().fit(dfy.iloc[i-rolling_beta:i,0].values.reshape(-1, 1), dfy.iloc[i-rolling_beta:i,1].values.reshape(-1, 1)).coef_
    dfy.iloc[i,3] =beta[0]  #Here we shift Beta
  dfy.drop(dfy.loc[dfy['Beta']==100].index, inplace=True)



  dfy['Diff'] = dfy['return_CAC40'] - dfy['return_SP500']

  dfy['Position'] = dfy['Diff'].apply(lambda x : -1 if x >= 0 else 1)
  dfy.Position = dfy.Position.shift(1)
  dfy['P/L']= 1 + dfy['Position']*(dfy['return_CAC40'] - dfy['Beta']*dfy['return_SP500'])

  dfy['Diff_rolling_std'] = dfy['Diff'].rolling(rolling_window_std).std()
  dfy['Diff_rolling_mean'] = dfy['Diff'].rolling(rolling_window_mean).mean()

  dfy.Diff=dfy.Diff.shift(1)
  dfy.Diff_rolling_mean=dfy.Diff_rolling_mean.shift(1)
  dfy.Diff_rolling_std=dfy.Diff_rolling_std.shift(1)

  df=dfy.iloc[np.where((dfy['Diff'] > dfy['Diff_rolling_mean'] + thresh1*dfy['Diff_rolling_std'])
                       |(dfy['Diff'] < dfy['Diff_rolling_mean'] - thresh2*dfy['Diff_rolling_std']))[0], :]
  df=df.iloc[np.where(df['VIX'] < thresh_vix)[0], :]
  df=df.iloc[np.where(df['VIX'] > 9.8)[0], :]

  cash=1
  profit=[cash]
  count=0
  winners=0
  
  for i in range(len(df)):
    cash = cash*df.iloc[i,6] 
    profit.append(cash)
    if df.iloc[i,6]>1:
      winners+=1
    count+=1

  n = len(df)
  print(n)

  if n > 1 :
    return [round((winners/count),5)*100,round(((df['P/L'].prod())**(1/n))-1,5)*100*(n/5)]
  else:
    return print('error')

strategy(14,18,10,1,0.8,36)

